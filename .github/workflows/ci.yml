name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.12.1'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run linter
        run: pnpm lint
        continue-on-error: true  # Don't fail on lint errors for now
      
      - name: Run type check
        run: pnpm typecheck
      
      - name: Build project
        run: pnpm build
      
      - name: Run unit tests
        run: pnpm test -- --run --coverage
      
      - name: Upload coverage reports
        if: matrix.node-version == '22.x'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: veas-cli
          fail_ci_if_error: false
      
      - name: Upload build artifacts
        if: matrix.node-version == '22.x'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build project
        run: pnpm build
      
      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          VEAS_API_URL: ${{ secrets.VEAS_API_URL || 'https://veas.app' }}
          VEAS_TEST_EMAIL: ${{ secrets.VEAS_TEST_EMAIL }}
          VEAS_TEST_PASSWORD: ${{ secrets.VEAS_TEST_PASSWORD }}
        continue-on-error: true  # Don't fail on E2E errors for now
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: test-results/

  build-check:
    name: Build Check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [22.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build project
        run: pnpm build
      
      - name: Test CLI execution
        run: node bin/veas.js --version

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [build-and-test, build-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build project
        run: pnpm build
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Check if version changed
        id: version-check
        run: |
          # Get the current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          
          # Check if this version is already published
          if npm view veas@${CURRENT_VERSION} version 2>/dev/null; then
            echo "Version ${CURRENT_VERSION} is already published"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version ${CURRENT_VERSION} is not published yet"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Bump version if needed
        id: bump
        if: steps.version-check.outputs.should_publish == 'false'
        run: |
          # Auto-detect version bump from commit messages
          COMMITS=$(git log HEAD~1..HEAD --pretty=format:"%s")
          
          if echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?!:"; then
            BUMP_TYPE="major"
          elif echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?:"; then
            BUMP_TYPE="minor"
          else
            BUMP_TYPE="patch"
          fi
          
          echo "Bumping version: ${BUMP_TYPE}"
          npm version ${BUMP_TYPE} --no-git-tag-version
          
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "bumped=true" >> $GITHUB_OUTPUT
      
      - name: Rebuild after version bump
        if: steps.bump.outputs.bumped == 'true'
        run: pnpm build
      
      - name: Publish to NPM
        if: steps.version-check.outputs.should_publish == 'true' || steps.bump.outputs.bumped == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Get final version
        id: final-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Commit version bump
        if: steps.bump.outputs.bumped == 'true'
        run: |
          git add package.json pnpm-lock.yaml
          git commit -m "chore: bump version to v${{ steps.final-version.outputs.version }} [skip ci]"
          git push origin main
      
      - name: Create Git tag
        if: steps.version-check.outputs.should_publish == 'true' || steps.bump.outputs.bumped == 'true'
        run: |
          VERSION=${{ steps.final-version.outputs.version }}
          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          git push origin "v${VERSION}"
      
      - name: Create GitHub Release
        if: steps.version-check.outputs.should_publish == 'true' || steps.bump.outputs.bumped == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.final-version.outputs.version }}
          name: veas-cli v${{ steps.final-version.outputs.version }}
          body: |
            ## 🚀 veas-cli v${{ steps.final-version.outputs.version }}
            
            ### Installation
            ```bash
            npm install -g veas
            # or
            pnpm add -g veas
            ```
            
            ### Changes
            See commit history for changes in this release.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Publish success notification
        if: steps.version-check.outputs.should_publish == 'true' || steps.bump.outputs.bumped == 'true'
        run: |
          VERSION=${{ steps.final-version.outputs.version }}
          echo "✅ Successfully published veas@${VERSION} to NPM"
          echo "📦 Package URL: https://www.npmjs.com/package/veas"
          echo "🏷️ Git Tag: v${VERSION}"
          echo ""
          echo "Users can now install with:"
          echo "  npm install -g veas@${VERSION}"

  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, build-check]
    if: always()
    
    steps:
      - name: Check pipeline status
        run: |
          echo "Pipeline Summary:"
          echo "=================="
          echo "Build and Test: ${{ needs.build-and-test.result }}"
          echo "Build Check: ${{ needs.build-check.result }}"
          
          if [ "${{ needs.build-and-test.result }}" != "success" ] || [ "${{ needs.build-check.result }}" != "success" ]; then
            echo "❌ Pipeline failed"
            exit 1
          else
            echo "✅ All checks passed successfully!"
          fi